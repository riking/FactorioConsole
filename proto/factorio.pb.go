// Code generated by protoc-gen-go.
// source: factorio.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	factorio.proto

It has these top-level messages:
	LuaCommandRequest
	CommandRequest
	CommandResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type LuaCommandRequest struct {
	Code             *string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LuaCommandRequest) Reset()                    { *m = LuaCommandRequest{} }
func (m *LuaCommandRequest) String() string            { return proto1.CompactTextString(m) }
func (*LuaCommandRequest) ProtoMessage()               {}
func (*LuaCommandRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LuaCommandRequest) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

type CommandRequest struct {
	Cmdline          *string `protobuf:"bytes,1,opt,name=cmdline" json:"cmdline,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CommandRequest) Reset()                    { *m = CommandRequest{} }
func (m *CommandRequest) String() string            { return proto1.CompactTextString(m) }
func (*CommandRequest) ProtoMessage()               {}
func (*CommandRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CommandRequest) GetCmdline() string {
	if m != nil && m.Cmdline != nil {
		return *m.Cmdline
	}
	return ""
}

type CommandResponse struct {
	Response         *string `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CommandResponse) Reset()                    { *m = CommandResponse{} }
func (m *CommandResponse) String() string            { return proto1.CompactTextString(m) }
func (*CommandResponse) ProtoMessage()               {}
func (*CommandResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CommandResponse) GetResponse() string {
	if m != nil && m.Response != nil {
		return *m.Response
	}
	return ""
}

func init() {
	proto1.RegisterType((*LuaCommandRequest)(nil), "wrapfactorio.LuaCommandRequest")
	proto1.RegisterType((*CommandRequest)(nil), "wrapfactorio.CommandRequest")
	proto1.RegisterType((*CommandResponse)(nil), "wrapfactorio.CommandResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for FactorioConsole service

type FactorioConsoleClient interface {
	LuaCommand(ctx context.Context, in *LuaCommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
	OtherCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
}

type factorioConsoleClient struct {
	cc *grpc.ClientConn
}

func NewFactorioConsoleClient(cc *grpc.ClientConn) FactorioConsoleClient {
	return &factorioConsoleClient{cc}
}

func (c *factorioConsoleClient) LuaCommand(ctx context.Context, in *LuaCommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := grpc.Invoke(ctx, "/wrapfactorio.FactorioConsole/LuaCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *factorioConsoleClient) OtherCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := grpc.Invoke(ctx, "/wrapfactorio.FactorioConsole/OtherCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FactorioConsole service

type FactorioConsoleServer interface {
	LuaCommand(context.Context, *LuaCommandRequest) (*CommandResponse, error)
	OtherCommand(context.Context, *CommandRequest) (*CommandResponse, error)
}

func RegisterFactorioConsoleServer(s *grpc.Server, srv FactorioConsoleServer) {
	s.RegisterService(&_FactorioConsole_serviceDesc, srv)
}

func _FactorioConsole_LuaCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LuaCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FactorioConsoleServer).LuaCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wrapfactorio.FactorioConsole/LuaCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FactorioConsoleServer).LuaCommand(ctx, req.(*LuaCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FactorioConsole_OtherCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FactorioConsoleServer).OtherCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wrapfactorio.FactorioConsole/OtherCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FactorioConsoleServer).OtherCommand(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FactorioConsole_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wrapfactorio.FactorioConsole",
	HandlerType: (*FactorioConsoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LuaCommand",
			Handler:    _FactorioConsole_LuaCommand_Handler,
		},
		{
			MethodName: "OtherCommand",
			Handler:    _FactorioConsole_OtherCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto1.RegisterFile("factorio.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x4b, 0x4c, 0x2e,
	0xc9, 0x2f, 0xca, 0xcc, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x29, 0x2f, 0x4a, 0x2c,
	0x80, 0x89, 0x29, 0xa9, 0x73, 0x09, 0xfa, 0x94, 0x26, 0x3a, 0xe7, 0xe7, 0xe6, 0x26, 0xe6, 0xa5,
	0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x09, 0x71, 0xb1, 0x24, 0xe7, 0xa7, 0xa4, 0x4a,
	0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x4a, 0x5a, 0x5c, 0x7c, 0x68, 0xaa, 0x24, 0xb8,
	0xd8, 0x93, 0x73, 0x53, 0x72, 0x32, 0xf3, 0x60, 0x0a, 0x61, 0x5c, 0x25, 0x5d, 0x2e, 0x7e, 0xb8,
	0xda, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x29, 0x2e, 0x8e, 0x22, 0x28, 0x1b, 0xaa, 0x1a,
	0xce, 0x37, 0xda, 0xc0, 0xc8, 0xc5, 0xef, 0x06, 0x75, 0x90, 0x73, 0x7e, 0x5e, 0x71, 0x7e, 0x4e,
	0xaa, 0x90, 0x1f, 0x17, 0x17, 0xc2, 0x5d, 0x42, 0xf2, 0x7a, 0xc8, 0x8e, 0xd6, 0xc3, 0x70, 0xb1,
	0x94, 0x2c, 0xaa, 0x02, 0x34, 0xdb, 0x95, 0x18, 0x84, 0x7c, 0xb9, 0x78, 0xfc, 0x4b, 0x32, 0x52,
	0x8b, 0x60, 0x26, 0xca, 0xe0, 0xd0, 0x40, 0x9c, 0x71, 0x4e, 0xec, 0x51, 0xac, 0xe0, 0xd0, 0x04,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x51, 0xb1, 0xf1, 0x5e, 0x01, 0x00, 0x00,
}
